//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rimss.Web.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RimssDbEntities : DbContext
    {
        public RimssDbEntities()
            : base("name=RimssDbEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<ConvertedImage> ConvertedImages { get; set; }
        public virtual DbSet<Folder> Folders { get; set; }
        public virtual DbSet<IdentityCache> IdentityCaches { get; set; }
        public virtual DbSet<SourceImage> SourceImages { get; set; }
        public virtual DbSet<ConversionJobLog> ConversionJobLogs { get; set; }
        public virtual DbSet<FileConversionLog> FileConversionLogs { get; set; }
        public virtual DbSet<ImageFormatCode> ImageFormatCodes { get; set; }
        public virtual DbSet<JobReasonCode> JobReasonCodes { get; set; }
        public virtual DbSet<JobStatusCode> JobStatusCodes { get; set; }
        public virtual DbSet<View_ApplicationConversionJobLogListing> View_ApplicationConversionJobLogListing { get; set; }
        public virtual DbSet<View_ApplicationConvertedImageListing> View_ApplicationConvertedImageListing { get; set; }
        public virtual DbSet<View_ApplicationListing> View_ApplicationListing { get; set; }
        public virtual DbSet<View_FileConversionChangeDetails> View_FileConversionChangeDetails { get; set; }
        public virtual DbSet<View_FolderListing> View_FolderListing { get; set; }
        public virtual DbSet<View_JobFileConversionLogListing> View_JobFileConversionLogListing { get; set; }
        public virtual DbSet<View_SourceConvertedImageListing> View_SourceConvertedImageListing { get; set; }
        public virtual DbSet<View_SourceFileConversionLogListing> View_SourceFileConversionLogListing { get; set; }
        public virtual DbSet<View_SourceImageListing> View_SourceImageListing { get; set; }
        public virtual DbSet<View_SystemConversionJobLogListing> View_SystemConversionJobLogListing { get; set; }
        public virtual DbSet<View_SystemConvertedImageListing> View_SystemConvertedImageListing { get; set; }
    
        public virtual int EnsureCurrentUserIdentityCache(ObjectParameter id)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EnsureCurrentUserIdentityCache", id);
        }
    
        public virtual ObjectResult<GetCurrentUserIdentityCache_Result> GetCurrentUserIdentityCache()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCurrentUserIdentityCache_Result>("GetCurrentUserIdentityCache");
        }
    
        public virtual ObjectResult<proc_FinishConversionJob_Result> proc_FinishConversionJob(Nullable<System.Guid> id, Nullable<int> statusId, string statusMessage, string detailMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var statusMessageParameter = statusMessage != null ?
                new ObjectParameter("StatusMessage", statusMessage) :
                new ObjectParameter("StatusMessage", typeof(string));
    
            var detailMessageParameter = detailMessage != null ?
                new ObjectParameter("DetailMessage", detailMessage) :
                new ObjectParameter("DetailMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_FinishConversionJob_Result>("proc_FinishConversionJob", idParameter, statusIdParameter, statusMessageParameter, detailMessageParameter);
        }
    
        public virtual int proc_StartConversionJob(Nullable<System.Guid> sourceImageId, Nullable<int> width, Nullable<int> height, Nullable<int> format, Nullable<System.Guid> startedById, Nullable<int> initialStatusId, string statusMessage)
        {
            var sourceImageIdParameter = sourceImageId.HasValue ?
                new ObjectParameter("SourceImageId", sourceImageId) :
                new ObjectParameter("SourceImageId", typeof(System.Guid));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(int));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            var formatParameter = format.HasValue ?
                new ObjectParameter("Format", format) :
                new ObjectParameter("Format", typeof(int));
    
            var startedByIdParameter = startedById.HasValue ?
                new ObjectParameter("StartedById", startedById) :
                new ObjectParameter("StartedById", typeof(System.Guid));
    
            var initialStatusIdParameter = initialStatusId.HasValue ?
                new ObjectParameter("InitialStatusId", initialStatusId) :
                new ObjectParameter("InitialStatusId", typeof(int));
    
            var statusMessageParameter = statusMessage != null ?
                new ObjectParameter("StatusMessage", statusMessage) :
                new ObjectParameter("StatusMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_StartConversionJob", sourceImageIdParameter, widthParameter, heightParameter, formatParameter, startedByIdParameter, initialStatusIdParameter, statusMessageParameter);
        }
    
        public virtual ObjectResult<AddPendingFileConversion_Result> AddPendingFileConversion(Nullable<System.Guid> jobId, Nullable<System.Guid> sourceImageId, string tag, Nullable<int> width, Nullable<int> height, Nullable<int> formatId, string statusMessage, string detailMessage)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(System.Guid));
    
            var sourceImageIdParameter = sourceImageId.HasValue ?
                new ObjectParameter("SourceImageId", sourceImageId) :
                new ObjectParameter("SourceImageId", typeof(System.Guid));
    
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(int));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            var formatIdParameter = formatId.HasValue ?
                new ObjectParameter("FormatId", formatId) :
                new ObjectParameter("FormatId", typeof(int));
    
            var statusMessageParameter = statusMessage != null ?
                new ObjectParameter("StatusMessage", statusMessage) :
                new ObjectParameter("StatusMessage", typeof(string));
    
            var detailMessageParameter = detailMessage != null ?
                new ObjectParameter("DetailMessage", detailMessage) :
                new ObjectParameter("DetailMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddPendingFileConversion_Result>("AddPendingFileConversion", jobIdParameter, sourceImageIdParameter, tagParameter, widthParameter, heightParameter, formatIdParameter, statusMessageParameter, detailMessageParameter);
        }
    
        public virtual ObjectResult<CancelConversionJob_Result> CancelConversionJob(Nullable<System.Guid> jobId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CancelConversionJob_Result>("CancelConversionJob", jobIdParameter);
        }
    
        public virtual ObjectResult<CreatePendingConversionJob_Result> CreatePendingConversionJob(Nullable<System.Guid> applicationId, Nullable<int> reasonId, string statusMessage, string detailMessage)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var reasonIdParameter = reasonId.HasValue ?
                new ObjectParameter("ReasonId", reasonId) :
                new ObjectParameter("ReasonId", typeof(int));
    
            var statusMessageParameter = statusMessage != null ?
                new ObjectParameter("StatusMessage", statusMessage) :
                new ObjectParameter("StatusMessage", typeof(string));
    
            var detailMessageParameter = detailMessage != null ?
                new ObjectParameter("DetailMessage", detailMessage) :
                new ObjectParameter("DetailMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CreatePendingConversionJob_Result>("CreatePendingConversionJob", applicationIdParameter, reasonIdParameter, statusMessageParameter, detailMessageParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<StartNextPendingFileConversion_Result> StartNextPendingFileConversion(Nullable<System.Guid> jobId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StartNextPendingFileConversion_Result>("StartNextPendingFileConversion", jobIdParameter);
        }
    
        public virtual ObjectResult<UpdateConversionJobStatus_Result> UpdateConversionJobStatus(Nullable<System.Guid> jobId)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateConversionJobStatus_Result>("UpdateConversionJobStatus", jobIdParameter);
        }
    }
}
